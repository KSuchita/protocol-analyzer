{"ast":null,"code":"var _jsxFileName = \"D:\\\\protocol-analyzer\\\\client\\\\src\\\\pages\\\\VisualizationDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { io } from 'socket.io-client';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction VisualizationDashboard() {\n  _s();\n  const [simulated, setSimulated] = useState([]);\n  const [realtime, setRealtime] = useState([]);\n\n  // ---- Simulated Random Data ----\n  useEffect(() => {\n    const generateSimulated = () => {\n      setSimulated(prev => {\n        const newData = {\n          time: `T${prev.length + 1}`,\n          throughput: Math.floor(Math.random() * 1000) + 500,\n          // 500–1500 kbps\n          delay: Math.floor(Math.random() * 100) + 20,\n          // 20–120 ms\n          packetLoss: Math.random() * 5 // 0–5%\n        };\n        const updated = [...prev, newData];\n        return updated.slice(-10); // keep only last 10 points\n      });\n    };\n\n    // Generate every 3 seconds\n    const interval = setInterval(generateSimulated, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // ---- Real-time Data from Socket.IO ----\n  useEffect(() => {\n    socket.on('protocolMetrics', newMetrics => {\n      setRealtime(prev => {\n        const mapped = newMetrics.map((m, i) => ({\n          time: `Live${prev.length + i + 1}`,\n          throughput: m.throughput || 0,\n          delay: m.delay || 0,\n          packetLoss: m.packetLoss || 0\n        }));\n        const updated = [...prev, ...mapped];\n        return updated.slice(-10); // keep last 10 points\n      });\n    });\n    return () => socket.disconnect();\n  }, []);\n\n  // ---- Helper Function ----\n  const extract = (arr, key) => arr.map(m => m[key]);\n\n  // ---- Simulated Chart ----\n  const simulatedData = {\n    labels: simulated.map(s => s.time),\n    datasets: [{\n      label: 'Simulated Throughput (kbps)',\n      data: extract(simulated, 'throughput'),\n      borderColor: '#28a745',\n      fill: false,\n      tension: 0.3\n    }, {\n      label: 'Simulated Delay (ms)',\n      data: extract(simulated, 'delay'),\n      borderColor: '#ff9900',\n      fill: false,\n      tension: 0.3\n    }, {\n      label: 'Simulated Packet Loss (%)',\n      data: extract(simulated, 'packetLoss'),\n      borderColor: '#6f42c1',\n      fill: false,\n      tension: 0.3\n    }]\n  };\n\n  // ---- Real-time Chart ----\n  const realtimeData = {\n    labels: realtime.map(r => r.time),\n    datasets: [{\n      label: 'Real-time Throughput (kbps)',\n      data: extract(realtime, 'throughput'),\n      borderColor: '#007bff',\n      fill: false,\n      tension: 0.3\n    }, {\n      label: 'Real-time Delay (ms)',\n      data: extract(realtime, 'delay'),\n      borderColor: '#dc3545',\n      fill: false,\n      tension: 0.3\n    }, {\n      label: 'Real-time Packet Loss (%)',\n      data: extract(realtime, 'packetLoss'),\n      borderColor: '#17a2b8',\n      fill: false,\n      tension: 0.3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDCCA Visualization Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Simulated vs Real-Time Network Performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83E\\uDDEA Simulated Data \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: simulatedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      style: {\n        marginTop: '40px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u26A1 Real-Time Data \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: realtimeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), realtime.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u23F3 Waiting for live data from backend...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(VisualizationDashboard, \"1LAkNZRpJ8L8zFp8T7eDHPUc2OU=\");\n_c = VisualizationDashboard;\nexport default VisualizationDashboard;\nvar _c;\n$RefreshReg$(_c, \"VisualizationDashboard\");","map":{"version":3,"names":["React","useEffect","useState","Line","io","jsxDEV","_jsxDEV","socket","VisualizationDashboard","_s","simulated","setSimulated","realtime","setRealtime","generateSimulated","prev","newData","time","length","throughput","Math","floor","random","delay","packetLoss","updated","slice","interval","setInterval","clearInterval","on","newMetrics","mapped","map","m","i","disconnect","extract","arr","key","simulatedData","labels","s","datasets","label","data","borderColor","fill","tension","realtimeData","r","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","_c","$RefreshReg$"],"sources":["D:/protocol-analyzer/client/src/pages/VisualizationDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { io } from 'socket.io-client';\r\nimport 'chart.js/auto';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nfunction VisualizationDashboard() {\r\n  const [simulated, setSimulated] = useState([]);\r\n  const [realtime, setRealtime] = useState([]);\r\n\r\n  // ---- Simulated Random Data ----\r\n  useEffect(() => {\r\n    const generateSimulated = () => {\r\n      setSimulated((prev) => {\r\n        const newData = {\r\n          time: `T${prev.length + 1}`,\r\n          throughput: Math.floor(Math.random() * 1000) + 500, // 500–1500 kbps\r\n          delay: Math.floor(Math.random() * 100) + 20,        // 20–120 ms\r\n          packetLoss: Math.random() * 5,                      // 0–5%\r\n        };\r\n        const updated = [...prev, newData];\r\n        return updated.slice(-10); // keep only last 10 points\r\n      });\r\n    };\r\n\r\n    // Generate every 3 seconds\r\n    const interval = setInterval(generateSimulated, 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // ---- Real-time Data from Socket.IO ----\r\n  useEffect(() => {\r\n    socket.on('protocolMetrics', (newMetrics) => {\r\n      setRealtime((prev) => {\r\n        const mapped = newMetrics.map((m, i) => ({\r\n          time: `Live${prev.length + i + 1}`,\r\n          throughput: m.throughput || 0,\r\n          delay: m.delay || 0,\r\n          packetLoss: m.packetLoss || 0,\r\n        }));\r\n        const updated = [...prev, ...mapped];\r\n        return updated.slice(-10); // keep last 10 points\r\n      });\r\n    });\r\n\r\n    return () => socket.disconnect();\r\n  }, []);\r\n\r\n  // ---- Helper Function ----\r\n  const extract = (arr, key) => arr.map((m) => m[key]);\r\n\r\n  // ---- Simulated Chart ----\r\n  const simulatedData = {\r\n    labels: simulated.map((s) => s.time),\r\n    datasets: [\r\n      {\r\n        label: 'Simulated Throughput (kbps)',\r\n        data: extract(simulated, 'throughput'),\r\n        borderColor: '#28a745',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Simulated Delay (ms)',\r\n        data: extract(simulated, 'delay'),\r\n        borderColor: '#ff9900',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Simulated Packet Loss (%)',\r\n        data: extract(simulated, 'packetLoss'),\r\n        borderColor: '#6f42c1',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // ---- Real-time Chart ----\r\n  const realtimeData = {\r\n    labels: realtime.map((r) => r.time),\r\n    datasets: [\r\n      {\r\n        label: 'Real-time Throughput (kbps)',\r\n        data: extract(realtime, 'throughput'),\r\n        borderColor: '#007bff',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Real-time Delay (ms)',\r\n        data: extract(realtime, 'delay'),\r\n        borderColor: '#dc3545',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Real-time Packet Loss (%)',\r\n        data: extract(realtime, 'packetLoss'),\r\n        borderColor: '#17a2b8',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>📊 Visualization Dashboard</h1>\r\n      <p>Simulated vs Real-Time Network Performance</p>\r\n\r\n      <div className=\"chart\">\r\n        <h3>🧪 Simulated Data </h3>\r\n        <Line data={simulatedData} />\r\n      </div>\r\n\r\n      <div className=\"chart\" style={{ marginTop: '40px' }}>\r\n        <h3>⚡ Real-Time Data </h3>\r\n        <Line data={realtimeData} />\r\n      </div>\r\n\r\n      {realtime.length === 0 && (\r\n        <p>⏳ Waiting for live data from backend...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VisualizationDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}