{"ast":null,"code":"var _jsxFileName = \"D:\\\\protocol-analyzer\\\\client\\\\src\\\\pages\\\\VisualizationDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction VisualizationDashboard() {\n  _s();\n  const [simulated, setSimulated] = useState([]);\n  const [realtime, setRealtime] = useState([]);\n\n  // Fetch simulated scenarios from backend once\n  const fetchSimulatedData = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/api/dashboard/scenarios');\n      setSimulated(res.data || []);\n    } catch (err) {\n      console.error('Error fetching simulated data:', err);\n    }\n  };\n  useEffect(() => {\n    fetchSimulatedData();\n\n    // Handle live Socket.IO data\n    socket.on('protocolMetrics', newMetrics => {\n      setRealtime(prev => {\n        const updated = [...prev, ...newMetrics];\n        return updated.slice(-20); // keep last 20 updates\n      });\n    });\n    return () => socket.disconnect();\n  }, []);\n\n  // Combine labels based on timestamps\n  const labels = [...simulated.map((_, i) => `Sim${i + 1}`), ...realtime.map((_, i) => `Live${i + 1}`)];\n\n  // Function to safely map metric values\n  const extract = (arr, key) => arr.map(m => m[key] || 0);\n  const chartData = {\n    labels,\n    datasets: [{\n      label: 'Simulated Throughput (kbps)',\n      data: extract(simulated, 'throughput'),\n      borderColor: '#28a745',\n      fill: false,\n      tension: 0.3\n    }, {\n      label: 'Live Throughput (kbps)',\n      data: extract(realtime, 'throughput'),\n      borderColor: '#007bff',\n      fill: false,\n      tension: 0.3\n    }, {\n      label: 'Simulated Delay (ms)',\n      data: extract(simulated, 'delay'),\n      borderColor: '#ff9900',\n      fill: false,\n      tension: 0.3\n    }, {\n      label: 'Live Delay (ms)',\n      data: extract(realtime, 'delay'),\n      borderColor: '#dc3545',\n      fill: false,\n      tension: 0.3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDCCA Visualization Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Showing both simulated and live real-time protocol performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), realtime.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u23F3 Waiting for live data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(VisualizationDashboard, \"otsJ/P0SFxV+AiZbsNGBDzHnij4=\");\n_c = VisualizationDashboard;\nexport default VisualizationDashboard;\nvar _c;\n$RefreshReg$(_c, \"VisualizationDashboard\");","map":{"version":3,"names":["React","useEffect","useState","Line","io","axios","jsxDEV","_jsxDEV","socket","VisualizationDashboard","_s","simulated","setSimulated","realtime","setRealtime","fetchSimulatedData","res","get","data","err","console","error","on","newMetrics","prev","updated","slice","disconnect","labels","map","_","i","extract","arr","key","m","chartData","datasets","label","borderColor","fill","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["D:/protocol-analyzer/client/src/pages/VisualizationDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { io } from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport 'chart.js/auto';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nfunction VisualizationDashboard() {\r\n  const [simulated, setSimulated] = useState([]);\r\n  const [realtime, setRealtime] = useState([]);\r\n\r\n  // Fetch simulated scenarios from backend once\r\n  const fetchSimulatedData = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/api/dashboard/scenarios');\r\n      setSimulated(res.data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching simulated data:', err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSimulatedData();\r\n\r\n    // Handle live Socket.IO data\r\n    socket.on('protocolMetrics', (newMetrics) => {\r\n      setRealtime((prev) => {\r\n        const updated = [...prev, ...newMetrics];\r\n        return updated.slice(-20); // keep last 20 updates\r\n      });\r\n    });\r\n\r\n    return () => socket.disconnect();\r\n  }, []);\r\n\r\n  // Combine labels based on timestamps\r\n  const labels = [\r\n    ...simulated.map((_, i) => `Sim${i + 1}`),\r\n    ...realtime.map((_, i) => `Live${i + 1}`),\r\n  ];\r\n\r\n  // Function to safely map metric values\r\n  const extract = (arr, key) => arr.map((m) => m[key] || 0);\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Simulated Throughput (kbps)',\r\n        data: extract(simulated, 'throughput'),\r\n        borderColor: '#28a745',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Live Throughput (kbps)',\r\n        data: extract(realtime, 'throughput'),\r\n        borderColor: '#007bff',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Simulated Delay (ms)',\r\n        data: extract(simulated, 'delay'),\r\n        borderColor: '#ff9900',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Live Delay (ms)',\r\n        data: extract(realtime, 'delay'),\r\n        borderColor: '#dc3545',\r\n        fill: false,\r\n        tension: 0.3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>üìä Visualization Dashboard</h1>\r\n      <p>Showing both simulated and live real-time protocol performance</p>\r\n\r\n      <div className=\"chart\">\r\n        <Line data={chartData} />\r\n      </div>\r\n\r\n      {realtime.length === 0 && <p>‚è≥ Waiting for live data...</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VisualizationDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}